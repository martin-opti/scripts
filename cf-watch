#!/bin/bash
# Script to watch one or more CI pipelines in Codefresh. This makes it easy to
# see when your pipelines have completed.

# Provides terminal escape codes.
. ~/dotfiles/bash-libs/tput.bash
# Provides the `notify` command.
. ~/dotfiles/bash-libs/notify-macos.bash

current_cursor_row=0

notified=()
# Notify that a pipeline completed, with a message about its status.
# Ensures that we only notify once for a given build.
notify_completion () {
    build_id="$1"
    message="$2"
    sound="$3"

    # Check if we have already notified completion for this build
    for id in "${notified[@]}"; do
        if [[ "$id" == "$build_id" ]]; then
            return 0
        fi
    done

    notify "$PIPELINE_NAME" "$message" "$sound"
    notified+=("$build_id")
}

print_status () {
    status="$1"

    # Reset cursor to the top and clear lines
    while [[ "$current_cursor_row" -gt 0 ]]; do
        printf "${CURSOR_UPLINE}"
        current_cursor_row=$((current_cursor_row - 1))
    done

    while IFS= read -r s; do
        id=$(echo $s | jq -r '.id')
        state=$(echo $s | jq -r '.status')
        trigger=$(echo $s | jq -r '.trigger')

        url="https://g.codefresh.io/build/${id}"

        printf "${CURSOR_ERASERIGHT}"

        if [[ "$state" == "running" ]]; then
            printf "${COLOR_BLUE}[Running]${RESET_STYLE} $trigger ${COLOR_DARK_GRAY}($url)${RESET_STYLE}\n"
        elif [[ "$state" == "success" ]]; then
            printf "${COLOR_GREEN}[Done]${RESET_STYLE} $trigger ${COLOR_DARK_GRAY}($url)${RESET_STYLE}\n"
            notify_completion "$id" "$trigger completed successfully"
        elif [[ "$state" == "error" ]]; then
            printf "${COLOR_RED}[Failed]${RESET_STYLE} $trigger ${COLOR_DARK_GRAY}($url)${RESET_STYLE}\n"
            notify_completion "$id" "$trigger failed" "$NOTIFY_SOUND_BASSO"
        elif [[ "$state" == "terminated" ]]; then
            printf "${COLOR_MAGENTA}[Terminated]${RESET_STYLE} $trigger ${COLOR_DARK_GRAY}($url)${RESET_STYLE}\n"
            notify_completion "$id" "$trigger was terminated" "$NOTIFY_SOUND_BASSO"
        fi

        current_cursor_row=$((current_cursor_row + 1))
    done <<< "$status"
}

check_if_done() {
    status="$1"

    completed=0
    failed=0
    total=0

    while IFS= read -r s; do
        state=$(echo $s | jq -r '.status')

        if [[ "$state" != "running" ]]; then
            completed=$((completed + 1))
        fi

        if [[ "$state" == "error" ]]; then
            failed=$((failed + 1))
        fi

        total=$((total + 1))
    done <<< "$status"

    failed_msg=""
    if [[ "$failed" -gt 0 ]]; then
        failed_msg=" ($failed failed)"
    fi

    if [[ "$completed" -eq "$total" ]]; then
        notify "$PIPELINE_NAME" "All $REPO_NAME pipelines completed${failed_msg}"
        exit 0
    fi
}

# Script args
PIPELINE_NAME="$1"
REPO_NAME="$2"

if [[ -z "$REPO_NAME" ]]; then
    # Infer repo name from current git directory
    REPO_NAME=$(git remote get-url origin | sed -e 's|^.*/\(.*\)\.git$|\1|')
fi

if [[ -z "$PIPELINE_NAME" || -z "$REPO_NAME" ]]; then
    echo "Usage: $0 pipeline-name [repo-name]"
    exit 1
fi

# Find running builds for given pipeline and repo
find_running_builds() {
    codefresh get builds --pipeline-name "optimove-microservices/$PIPELINE_NAME" --status running -o json \
        | jq -r "if type==\"array\" then .[] else . end | select(.repository | contains(\"$REPO_NAME\")) | .id"
}

echo "Finding running builds..."
current_cursor_row=$((current_cursor_row + 1))
BUILD_IDS=$(find_running_builds)

if [[ -z "$BUILD_IDS" ]]; then
    echo "No running builds found."
    exit 2
fi

while true; do
    status=$(codefresh get builds $BUILD_IDS -o json \
        | jq -r -c 'if type=="array" then .[] else . end | {id, trigger, status, totalTime}')

    print_status "$status"
    check_if_done "$status"

    sleep 10
done
